<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Emacs on Justinlime&#39;s Dev Blog</title>
        <link>https://justinlime.dev/tags/emacs/</link>
        <description>Recent content in Emacs on Justinlime&#39;s Dev Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 28 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://justinlime.dev/tags/emacs/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Switching from Neovim to Emacs</title>
        <link>https://justinlime.dev/p/nvim-to-emacs/</link>
        <pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://justinlime.dev/p/nvim-to-emacs/</guid>
        <description>&lt;img src="https://justinlime.dev/p/nvim-to-emacs/emacs.png" alt="Featured image of post Switching from Neovim to Emacs" /&gt;
&lt;div id=&#34;outline-container-headline-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-2&#34;&gt;
Preface
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-2&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;This is a starters&amp;#39; guide for somebody wanting to try out emacs, coming from nvim. This is written from my perspective
as somebody who used Neovim for a while. I had a configuration I was really happy with when using nvim, but its&amp;#39; 
limitations made my eyes wander to other options.&lt;/p&gt;
&lt;p&gt;
Since then, I&amp;#39;ve switched and landed on emacs as my preferred editor, and I&amp;#39;m extremely happy with it. My main reasons
for switching to emacs compared to neovim:&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-3&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-3&#34;&gt;
Configuration and Extensiblity 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-3&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Emacs is entirely configured in a single language, &lt;code class=&#34;verbatim&#34;&gt;elisp&lt;/code&gt;, and emacs itself
is primarily written using this language. With this being the case, when you configure emacs, you&amp;#39;re basically editing
the source code itself, instead of interacting with a predefined API such as neovim. Emacs lets you configure the
core functionality of emacs itself, and do many things which just aren&amp;#39;t possible in neovim.&lt;/p&gt;
&lt;p&gt;
This allows for a far greater degree of customizability, which is important because I feel an editor you spend
a large amount of time in should be custom suited to your needs or prefernces, no matter how granular. &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-4&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-4&#34;&gt;
Documentation
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-4&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Emacs is self-documenting. You can view definitions of functions and variables directly from within emacs to see
what they&amp;#39;re meant to do and why they are there. Anytime you see a function in someone&amp;#39;s configuration, and you wonder:
&amp;#34;What is this even doing&amp;#34;, you can use build in functions like &lt;code&gt;describe-variable&lt;/code&gt; or &lt;code&gt;describe-function&lt;/code&gt; to view them.&lt;/p&gt;
&lt;p&gt;
For example, if I use the &lt;code&gt;describe-variable&lt;/code&gt; function to view the definition of the &lt;code&gt;gc-cons-threshold&lt;/code&gt; I would get 
the following display:&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;./describe.png&#34; alt=&#34;./describe.png&#34; title=&#34;./describe.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-5&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-5&#34;&gt;
Packages
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-5&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Emacs has packages/plugins written for it that I cannot find a suitable replacement for in neovim. Whether that be 
due to the fact that they simply haven&amp;#39;t been written yet, or phycially can&amp;#39;t exist within neovim due to previously
mentioned API limitations, or the lack of a GUI.&lt;/p&gt;
&lt;p&gt;
A few examples of these packages/features in my case include:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;
&lt;code class=&#34;verbatim&#34;&gt;Magit&lt;/code&gt;
&lt;/dt&gt;
&lt;dd&gt;An unbeatable git client&lt;/dd&gt;
&lt;dt&gt;
&lt;code class=&#34;verbatim&#34;&gt;Org Mode&lt;/code&gt;
&lt;/dt&gt;
&lt;dd&gt;A mode for writing notes and documents in markup (this webpage is written in org)&lt;/dd&gt;
&lt;dt&gt;
&lt;code class=&#34;verbatim&#34;&gt;Tramp&lt;/code&gt;
&lt;/dt&gt;
&lt;dd&gt;The built-in remote connection client, allows connecting and editing files over SSH, SMB, etc, without having to install another instance of the editor on a remote device.&lt;/dd&gt;
&lt;dt&gt;
&lt;code class=&#34;verbatim&#34;&gt;Dired&lt;/code&gt;
&lt;/dt&gt;
&lt;dd&gt;The built-in file browser. Dired is one of the best file browsers I&amp;#39;ve used in general, not just in regards to editors.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-6&#34;&gt;
Getting Started
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-6&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;With the preface in mind, this will be a short guide to start building your emacs configuration, including some 
packages which I feel are essential to the experience for anyone coming from neovim. This is not meant to be the full
experience, and I may delve into deeper configuration with things like LSP and Treesitter in a later article. This guilde
is meant to serve as a starter point.&lt;/p&gt;
&lt;p&gt;
As previously mentioned, emacs is written and configured using &lt;code class=&#34;verbatim&#34;&gt;elisp&lt;/code&gt;. For a run-down on how the language works,
check out my &lt;a href=&#34;https://justinlime.dev/p/nvim-to-emacs/&#34;&gt;other guide here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Emacs searches for an &lt;code class=&#34;verbatim&#34;&gt;init.el&lt;/code&gt; file in the &lt;code&gt;~/.emacs.d&lt;/code&gt; first, then &lt;code&gt;~/.config/emacs&lt;/code&gt; OR &lt;code&gt;$XDG_CONFIG_HOME/emacs&lt;/code&gt; if it is set.&lt;/p&gt;
&lt;p&gt;
Here are some useful keybinds for when getting started &lt;code class=&#34;verbatim&#34;&gt;(C = Ctrl, M = Meta/Alt)&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;M-x&lt;/code&gt; - The command launcher, you can use this to execute any interactive function in emacs, like &lt;code&gt;describe-variable&lt;/code&gt; or &lt;code&gt;describe-function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-h v&lt;/code&gt; - Built in shortcut for using the &lt;code&gt;describe-variable&lt;/code&gt; function to view a variable&amp;#39;s definition &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-h f&lt;/code&gt; - Built in shortcut for using the &lt;code&gt;describe-function&lt;/code&gt; function to view a function&amp;#39;s definition &lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;outline-container-headline-7&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-7&#34;&gt;
Package Manager 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-7&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;To start things out, we&amp;#39;ll need to enable and use the build in package-manager, &lt;code class=&#34;verbatim&#34;&gt;package.el&lt;/code&gt;. We can add the following
lines to our configuration to start using it:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;package&lt;/span&gt;) &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; load the package manager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;package-check-signature&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt;) &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; override signature errors&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; add package archives to package manager&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;add-to-list&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;melpa&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;https://melpa.org/packages/&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;package-initialize&lt;/span&gt;) &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; exactly what it sounds like &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; pull archvies and prevent warning messages only on very first startup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;unless&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;package-archive-contents&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;progn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;warning-minimum-level&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:emergency&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#dcaeea&#34;&gt;package-refresh-contents&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This will load the package manager, and pull the package archives and &lt;a href=&#34;https://melpa.org/#/&#34;&gt;MELPA&lt;/a&gt; and the default &lt;a href=&#34;https://elpa.gnu.org&#34;&gt;ELPA&lt;/a&gt; on the first startup.&lt;/p&gt;
&lt;p&gt;
Next, we can setup &lt;code class=&#34;verbatim&#34;&gt;use-package&lt;/code&gt; which is a unified framework that simplifies and consilidates the installation and configuration
of packages. &lt;/p&gt;
&lt;p&gt;
To do so, drop the following into your configuration:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; install use-package if it doesn&amp;#39;t exist yet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;unless&lt;/span&gt; (&lt;span style=&#34;color:#dcaeea&#34;&gt;package-installed-p&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;use-package&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;package-install&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;use-package&lt;/span&gt;))          
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;use-package&lt;/span&gt;) &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; load use-package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; Make use-package uses package.el, prevents having to use :ensure t on everything&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;use-package-always-ensure&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The above elisp will install use-package if it doesn&amp;#39;t exist, and integrate it with the package manager.&lt;/p&gt;
&lt;p&gt;
You&amp;#39;ll see many keywords with use-package during this guide. To see them all, you can use the keybind &lt;code&gt;C-h f&lt;/code&gt; on &lt;code&gt;use-package&lt;/code&gt; 
to see them all, but here are the ones used in this guide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;init&lt;/code&gt; - This section is run before the package is loaded&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;config&lt;/code&gt; - This section is run after the package is loaded&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;after&lt;/code&gt; - Load the package only after a differnt specified package is loaded&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;general&lt;/code&gt; - Used for general integration for keybinds, which I will cover a bit further down, this is only an option if you have general.el installed&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-8&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-8&#34;&gt;
Evil Mode 
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-8&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Definitely the most important package for someone migrating from neovim/vim. This packages enables emacs to ues 
Vim bindings in almost the exact same fashion you may be used to. For me, vim bindings are essential.&lt;/p&gt;
&lt;p&gt;
To install and use evil, you can use the following:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;evil&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;evil-want-keybinding&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt;) &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; needed when using with evil collection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;evil-mode&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;evil-collection&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:after&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;evil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;evil-collection-mode-list&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;magit&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;term&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;help&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;dashboard&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;dired&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;ibuffer&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;tetris&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;evil-collection-init&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
This will install and configure &lt;code class=&#34;verbatim&#34;&gt;evil-mode&lt;/code&gt; and &lt;code class=&#34;verbatim&#34;&gt;evil-collection&lt;/code&gt;. Evil-collection is a set of predefined
vim bindings for many popular build in modes, and other popular packages. You can see the defined modes we added
to this example are magit, term, help, dashboard, dired, and ibuffer. (also tetris)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-9&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-9&#34;&gt;
Keybinds
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-9&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div id=&#34;outline-container-headline-10&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-10&#34;&gt;
General 
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-10&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;Now that we have evil mode setup, we can start defining our own personal binds. Working with bindings with Evil-Mode can
be tricky and there can be some gotcha&amp;#39;s, so, I recommend using a package called &lt;code class=&#34;verbatim&#34;&gt;general&lt;/code&gt; to simply this.&lt;/p&gt;
&lt;p&gt;
Similar to &lt;code class=&#34;verbatim&#34;&gt;use-package&lt;/code&gt;, general is a unified framework to operate on keybindings, and has special integration 
with evil.&lt;/p&gt;
&lt;p&gt;
To start using it, we can add the following:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;general&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; By default, to escape the mini-buffer, you need to hit ESC 3 times, this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; bind changes that, so it only takes one.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;general-define-key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ef8383&#34;&gt;:keymaps&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;minibuffer-local-map&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&amp;lt;escape&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;keyboard-escape-quit&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; Let an active leader key for normal, visual, and emacs states&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;general-create-definer&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;leader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ef8383&#34;&gt;:states&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;normal&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;visual&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;emacs&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ef8383&#34;&gt;:keymaps&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ef8383&#34;&gt;:prefix&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;SPC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; set leader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ef8383&#34;&gt;:global-prefix&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;M-SPC&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; access leader in insert mode&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;leader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;:ignore&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Find file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;f f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;find-file&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Find file directly&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;leader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;:ignore&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Buffer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;b f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;switch-to-buffer*&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Find a buffer, or create a new one&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;b k&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;kill-this-buffer&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Kill the current buffer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;b r&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;revert-buffer&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Reload the current buffer&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;leader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;:ignore&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Comment&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;c r&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;comment-region&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Comment selection&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;c l&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;comment-line&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Comment line&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;leader&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;h&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;:ignore&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Help&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;h f&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;describe-function&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Help function&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;h v&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;describe-variable&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Help variable&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;h m&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;describe-mode&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Help mode&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;h c&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;describe-char&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Help character&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;h k&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;describe-key&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:wk&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;Help key/keybind&amp;#34;&lt;/span&gt;)))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In this example, we define a key-override for the minibuffer-local-map. This keymap is used when interacting
with the minibuffer, such as when using &lt;code&gt;M-x&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Following that, we setup a leader key, which I use space for. The &lt;code&gt;:ignore&lt;/code&gt; keyword will ignore the keypress
so no action is triggered until a followup key defined it pressed. The &lt;code&gt;:wk&lt;/code&gt; keyword adds a description used for which-key integration, which
we will setup shortly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-11&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-11&#34;&gt;
Keychord
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-11&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;If you&amp;#39;re like me, I always prefered to have &lt;code&gt;ESCAPE&lt;/code&gt; mapped to &lt;code&gt;jj&lt;/code&gt; in vim. You can recreate this behavior in Emacs with
the keychord package.&lt;/p&gt;
&lt;p&gt;
Heres an examle:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;key-chord&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;key-chord-mode&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;key-chord-two-keys-delay&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;key-chord-one-key-delay&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;key-chord-safety-interval-forward&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0.1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;key-chord-safety-interval-backward&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;key-chord-define&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;evil-insert-state-map&lt;/span&gt;  &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;jj&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;evil-normal-state&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The settings defined in the config are what I feel to be the closest to the default neovim/vim settings. Here, we map 
&lt;code&gt;jj&lt;/code&gt; to return to the &lt;code&gt;evil-normal-state&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-12&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-12&#34;&gt;
Which Key
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-12&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;If you&amp;#39;ve used neovim/vim, you&amp;#39;ve probably setup &lt;code class=&#34;verbatim&#34;&gt;which-key&lt;/code&gt; there at some point as well. &lt;code class=&#34;verbatim&#34;&gt;Which-key&lt;/code&gt; shows a menu
displaying possible followup keybinds corresponding to the given key you pressed.&lt;/p&gt;
&lt;p&gt;
Here&amp;#39;s how we can set it up:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;which-key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-mode&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-side-window-location&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;bottom&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-sort-order&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-key-order-alpha&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-sort-uppercase-first&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-add-column-padding&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-max-display-columns&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-min-display-lines&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-side-window-slot&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;-10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-side-window-max-height&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0.25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-idle-delay&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0.8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-max-description-length&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-allow-imprecise-window-fit&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#dcaeea&#34;&gt;which-key-separator&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34; → &amp;#34;&lt;/span&gt; ))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now, whenever we hit a key that has a possible key-sequence, we&amp;#39;ll kind a nice menu reminding us of the keybinds
we have setup. In this configuration, if I hit &lt;code&gt;SPC-b&lt;/code&gt;, I&amp;#39;ll get the following prompt:&lt;/p&gt;
&lt;p&gt;
&lt;img src=&#34;./which-key.png&#34; alt=&#34;./which-key.png&#34; title=&#34;./which-key.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-13&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-13&#34;&gt;
Minibuffer
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-13&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;The default mini-buffer area (where you are prompted when using the &lt;code&gt;M-x&lt;/code&gt; command for example) is pretty lacking by default.
There are a few packages we can use to make things much better in this regard.&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-14&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-14&#34;&gt;
Vertico
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-14&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;This replaces the default mini-buffer with a vertical and much more descriptive prompt, we can set it up using:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;vertico&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:general&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; you probably want this, lets backspace delete and entire directory completion, instead of&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; one char at a time.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;:keymaps&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;vertico-map&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&amp;lt;backspace&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;vertico-directory-delete-char&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;DEL&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;vertico-directory-delete-char&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;vertico-mode&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Here you can also see we use the &lt;code class=&#34;verbatim&#34;&gt;:general&lt;/code&gt; use-package keyword. This allows us to setup general bindings for the 
package/keymap we specify.&lt;/p&gt;
&lt;p&gt;
Heres what the mini-buffer prompt looked like before we installed this package:
&lt;img src=&#34;./vertico-before.png&#34; alt=&#34;./vertico-before.png&#34; title=&#34;./vertico-before.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
And heres what it looks like after:
&lt;img src=&#34;./vertico-after.png&#34; alt=&#34;./vertico-after.png&#34; title=&#34;./vertico-after.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-15&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-15&#34;&gt;
Marginalia 
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-15&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;Marginalia provides descriptive annoations to the mini-buffer, and overall makes searching for information a lot easier.&lt;/p&gt;
&lt;p&gt;
We can install it by using the definition:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;marginalia&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;marginalia-mode&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now, our output is much more descriptive:
&lt;img src=&#34;./marginalia.png&#34; alt=&#34;./marginalia.png&#34; title=&#34;./marginalia.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-16&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-16&#34;&gt;
Orderless
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-16&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;Orderless makes is a completion style that divides searches into space seperated characters or words, and doesn&amp;#39;t need
to be sequential. It ammends this style to both the mini-buffer as well as corfu which we will setup after this.&lt;/p&gt;
&lt;p&gt;
For example, if I did ran &lt;code&gt;M+x&lt;/code&gt; and input &amp;#34;key desc&amp;#34;, without orderless, I would get the following output:
&lt;img src=&#34;./orderless-before.png&#34; alt=&#34;./orderless-before.png&#34; title=&#34;./orderless-before.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
After installing orderless, it can match based on my search terms seen here:
&lt;img src=&#34;./orderless-after.png&#34; alt=&#34;./orderless-after.png&#34; title=&#34;./orderless-after.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;
Installing orderless is simple enough, just use the following:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;orderless&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;completion-styles&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;orderless&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;basic&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;completion-category-overrides&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;((&lt;span style=&#34;color:#dcaeea&#34;&gt;file&lt;/span&gt; (&lt;span style=&#34;color:#dcaeea&#34;&gt;styles&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;basic&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;partial-completion&lt;/span&gt;)))))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-17&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-17&#34;&gt;
Completions
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-17&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div id=&#34;outline-container-headline-18&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-18&#34;&gt;
Corfu + Cape
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-18&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;Emacs has a few different completion framworks you can use, but the best I&amp;#39;ve found is &lt;code class=&#34;verbatim&#34;&gt;Corfu&lt;/code&gt;. Corfu can be integrated 
with many completion methods like an LSP, and/or other packages such as &lt;code class=&#34;verbatim&#34;&gt;Cape&lt;/code&gt; which provides completion functions for things
like elisp code, keywords, and words present in the buffer. &lt;/p&gt;
&lt;p&gt;
We can set these up with the following:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;corfu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;corfu-popupinfo-delay&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;corfu-auto&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;corfu-cycle&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;corfu-preselect&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;prompt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;corfu-auto-delay&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#dcaeea&#34;&gt;corfu-auto-prefix&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;advice-add&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;eglot-completion-at-point&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:around&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;cape-wrap-buster&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;corfu-popupinfo-mode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;global-corfu-mode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;corfu-history-mode&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;cape&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;add-to-list&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;completion-at-point-functions&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;cape-dabbrev&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;add-to-list&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;completion-at-point-functions&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;cape-file&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;add-to-list&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;completion-at-point-functions&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;cape-elisp-block&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;add-to-list&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;completion-at-point-functions&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;#&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;cape-keyword&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we&amp;#39;ll be prompted for completions when entering in emacs function or variable names, and will provide
the documentation for them. This makes things a bit easier to write/undertand when starting out. &lt;/p&gt;
&lt;p&gt;
Heres what those completions may look like:
&lt;img src=&#34;./corfu.png&#34; alt=&#34;./corfu.png&#34; title=&#34;./corfu.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-19&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-19&#34;&gt;
Look and Feel
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-19&#34; class=&#34;outline-text-3&#34;&gt;
&lt;div id=&#34;outline-container-headline-20&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-20&#34;&gt;
Theme
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-20&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;Emacs by default is in light mode, which disturbs me to the core of my soul. We can replace it with a dark theme.
In this example, we will use &lt;a href=&#34;https://catppuccin.com/ports?q=emacs&#34;&gt;Catpuccin&lt;/a&gt;, but you can find some others &lt;a href=&#34;https://emacsthemes.com/&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
To install, we can add the following:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;catppuccin-theme&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;catppuccin-highlight-matches&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;load-theme&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;catppuccin&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now our eyes wont be fried anytime we open emacs:
&lt;img src=&#34;./theme.png&#34; alt=&#34;./theme.png&#34; title=&#34;./theme.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-21&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-21&#34;&gt;
Dashboard
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-21&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;Every good editor needs a sick dashboard. The main option used in emacs is &lt;code class=&#34;verbatim&#34;&gt;dashboard.el&lt;/code&gt;. Lets add it in:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;dashboard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;dashboard-setup-startup-hook&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Now we&amp;#39;re cooking:
&lt;img src=&#34;./dashboard.png&#34; alt=&#34;./dashboard.png&#34; title=&#34;./dashboard.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-22&#34; class=&#34;outline-4&#34;&gt;
&lt;h4 id=&#34;headline-22&#34;&gt;
Diredfl
&lt;/h4&gt;
&lt;div id=&#34;outline-text-headline-22&#34; class=&#34;outline-text-4&#34;&gt;
&lt;p&gt;This package changed the highlighting used in &lt;code class=&#34;verbatim&#34;&gt;dired&lt;/code&gt; buffers. As stated in the preface, dired is one of the best
file browsers I&amp;#39;ve ever used in general, so you&amp;#39;ll probably spending a lot of time looking at it. We can install using:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;use-package&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;diredfl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ef8383&#34;&gt;:config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (&lt;span style=&#34;color:#dcaeea&#34;&gt;diredfl-global-mode&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Heres a before and after:
&lt;img src=&#34;./dired-before.png&#34; alt=&#34;./dired-before.png&#34; title=&#34;./dired-before.png&#34; /&gt;
&lt;img src=&#34;./dired-after.png&#34; alt=&#34;./dired-after.png&#34; title=&#34;./dired-after.png&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-23&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-23&#34;&gt;
Preferences
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-23&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;Here are some other useful tweaks/peferences you can add in if you&amp;#39;re inclinded to do so:&lt;/p&gt;
&lt;div class=&#34;src src-emacs-lisp&#34;&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; set font size to 12 point&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;set-face-attribute&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;default&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;:height&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;120&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; disable menus&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;menu-bar-mode&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;-1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; disable toolbar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;tool-bar-mode&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;-1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; disable scrollbar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;scroll-bar-mode&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;-1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; automatically close pairs like (), [] and {}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;electric-pair-mode&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; highlight the current line&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;global-hl-line-mode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; automatically indent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;electric-indent-mode&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; display line numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;global-display-line-numbers-mode&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; truncate lines, nowrap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;setq-default&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;truncate-lines&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; stop emacs from inserting impertive configs into init.el&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; by dumping them into a custom.el file that will never be loaded&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;custom-file&lt;/span&gt; (&lt;span style=&#34;color:#00b1f7&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;user-emacs-directory&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;/custom.el&amp;#34;&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#dcaeea&#34;&gt;make-backup-files&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; stop creating backup ~ files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#dcaeea&#34;&gt;auto-save-default&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; stop creating autosave # files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#dcaeea&#34;&gt;create-lockfiles&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt;  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; stop creating lock .# files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#dcaeea&#34;&gt;blink-cursor-mode&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; exactly what is sounds like&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#dcaeea&#34;&gt;use-short-answers&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;t&lt;/span&gt;   &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; lets you type y,n instead of yes,no when prompted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#dcaeea&#34;&gt;use-dialog-box&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; disable gui menu pop-ups&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#dcaeea&#34;&gt;display-line-numbers-type&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;relative&lt;/span&gt; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; enable relative line numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#dcaeea&#34;&gt;password-cache-expiry&lt;/span&gt; &lt;span style=&#34;color:#b756ff;font-weight:bold&#34;&gt;nil&lt;/span&gt;) &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; prevents tramp passwords from expiring&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;;; Automatically refresh dired buffer when a change on disk is made&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;add-hook&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;dired-mode-hook&lt;/span&gt; &lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;auto-revert-mode&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;outline-container-headline-24&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;headline-24&#34;&gt;
Final Product
&lt;/h2&gt;
&lt;div id=&#34;outline-text-headline-24&#34; class=&#34;outline-text-2&#34;&gt;
&lt;p&gt;&lt;img src=&#34;./final.png&#34; alt=&#34;./final.png&#34; title=&#34;./final.png&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;outline-container-headline-25&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;headline-25&#34;&gt;
Summary
&lt;/h3&gt;
&lt;div id=&#34;outline-text-headline-25&#34; class=&#34;outline-text-3&#34;&gt;
&lt;p&gt;The gist of this setup was getting Vim bindings setup, and some quality of life improvements to fix the default 
look and functionality of Emacs. From here, you can check into some other packages you&amp;#39;re interested in. Typically on a 
package&amp;#39;s documention, they have setup steps included for setting up, along with using with &lt;code class=&#34;verbatim&#34;&gt;use-package&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
The corresponding &lt;code class=&#34;verbatim&#34;&gt;init.el&lt;/code&gt; we&amp;#39;ve written in this guide an be found &lt;a href=&#34;https://github.com/justinlime/emacs-starter/blob/main/init.el&#34;&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;
Here are some other awesome packages I recommend you check out and look into configuring. &lt;/p&gt;
&lt;p&gt;
&lt;code class=&#34;verbatim&#34;&gt;%&lt;/code&gt; - means the package is built into emacs by default&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;eglot %&lt;/code&gt; - LSP Client for Emacs &lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;org mode %&lt;/code&gt; - Tool for writing notes and documents in emacs&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;tramp %&lt;/code&gt; - Tool for connecting and editing remote files&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;magit&lt;/code&gt; - One of the best git clients ever created, build directly into emacs&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;yasnippet&lt;/code&gt; - Provide snippets for completion for use with corfu&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;sideline&lt;/code&gt; - Provide LSP diagnostic info directly in the buffer&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;perspective&lt;/code&gt; - Different workspaces with different sets of buffers visible to it&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;org-modern&lt;/code&gt; - Enhances the look and rendering of org documents&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;org-roam&lt;/code&gt; - A note-takers best friend&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;consult&lt;/code&gt; - Can be used as a fuzzy finder&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;affe&lt;/code&gt; - Fuzzy Finder like consult, faster but more experimental&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;undo-tree&lt;/code&gt; - Better handling of undo/redo actions in emacs&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;rainbow-delimters&lt;/code&gt; - Uses color to distinguish matching pairs like {} and ()&lt;/li&gt;
&lt;li&gt;&lt;code class=&#34;verbatim&#34;&gt;rainbow-mode&lt;/code&gt; - Render hex and RGB values directly in the buffer &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
